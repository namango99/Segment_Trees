
//Very Nice Problem.... First think of brute force solution than u may automatically see RMQ problem...But the only problem is for the 
//Segment tree to be dynamic ... For that i used a trick ...where i make a segment tree containing max value whenever during dfs
// i get a new value i update that value...
//www.codechef.com/problems/JTREE

import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class JTREE {

	public static void Build(long[] arr,long[] tree,int index,int start,int end) {
		if(start==end) {
			tree[index]=arr[start];
			return;
		}
		int mid=(start+end)>>1;
		Build(arr, tree, index*2, start, mid);
		Build(arr, tree, index*2+1, mid+1, end);
		tree[index]=Long.min(tree[index*2], tree[index*2+1]);
	}
	
	public static void UpdateNode(long[] tree,int index,int start,int end,int i,long val) {
		if(end<i || start>i)return;
		if(start==end) {
			tree[index]=val;
			return;
		}
		int mid=(start+end)>>1;
		UpdateNode(tree, index*2, start, mid, i, val);
		UpdateNode(tree, index*2+1, mid+1, end, i, val);
		tree[index]=Long.min(tree[index*2], tree[index*2+1]);
	}
	
	public static long Query(long[] tree,int index,int start,int end,int i,int j) {
		if(i<=start && j>=end) {
			return tree[index];
		}
		if(end<i || start>j) {
			return Long.MAX_VALUE/2;
		}
		int mid=(start+end)>>1;
		long left=Query(tree,index*2,start,mid,i,j);
		long right=Query(tree,index*2+1,mid+1,end,i,j);
		return Long.min(left, right);
	}
	
	public static class Pair{
		int cost;
		int k;
		public Pair(int cost,int k) {
			this.cost=cost;
			this.k=k;
		}
	}
	
	public static LinkedList<Integer>[] adj;
	public static LinkedList<Pair>[] tickets;
	
	public static void dfs(long[] tree,int pos,long[] arr,int current) {
		long min=Long.MAX_VALUE;
		for(Pair x:tickets[current]) {
			long tempmin=x.cost;
			int r=pos-1;
			int l=pos-x.k>=0?pos-x.k:0;
			tempmin+=Query(tree, 1, 0, arr.length-1, l, r);
			min=Long.min(min, tempmin);
		}
		UpdateNode(tree, 1, 0, arr.length-1, pos, pos==0?0:min);
		arr[current]=min;
		if(pos==0)arr[current]=0;
		for(Integer x:adj[current]) {
			dfs(tree, pos+1, arr, x);
		}
		UpdateNode(tree, 1, 0, arr.length-1, pos,Integer.MAX_VALUE);
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		out=new PrintWriter(new BufferedOutputStream(System.out));
		FastReader s=new FastReader();
		int n=s.nextInt();
		int m=s.nextInt();
		long[] arr=new long[n];
		long[] tree=new long[4*n+1];
		Arrays.fill(arr,Long.MAX_VALUE);
		Build(arr, tree, 1, 0, arr.length-1);
		adj=new LinkedList[n];
		for(int i=0;i<n;i++)adj[i]=new LinkedList<Integer>();
		for(int i=0;i<n-1;i++) {
			int u=s.nextInt()-1;
			int v=s.nextInt()-1;
			adj[v].add(u);
		}
		tickets=new LinkedList[n];
		for(int i=0;i<n;i++)tickets[i]=new LinkedList<Pair>();
		for(int i=0;i<m;i++) {
			int v=s.nextInt();
			int k=s.nextInt();
			int w=s.nextInt();
			tickets[v-1].add(new Pair(w,k));
		}
		dfs(tree, 0, arr, 0);
		int q=s.nextInt();
		while(q-->0) {
			int v=s.nextInt()-1;
			out.println(arr[v]);
		}
		out.close();
	}

	public static PrintWriter out;
	
	public static class FastReader {
		BufferedReader br;
		StringTokenizer st;
		//it reads the data about the specified point and divide the data about it ,it is quite fast
		//than using direct 

		public FastReader() {
			br = new BufferedReader(new InputStreamReader(System.in));
			//InputStream reads the data and decodes in character stream
			//It acts as bridge between byte stream and character stream
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());//converts string to integer
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (Exception e) {
				e.printStackTrace();
			}
			return str;
		}
	}
}
