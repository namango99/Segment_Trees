public class RMQLazyPropagation {

	public static void Build_SegementTree(int[] tree,int [] arr,int index,int start,int end) {
		//Base Case
		if(start>end) {
			return;
		}
		//Leaf node
		if(start==end) {
			tree[index]=arr[start];
			return;
		}
		//Internal Node
		int mid=(start+end) >> 1;
		Build_SegementTree(tree, arr, 2*index, start, mid);
		Build_SegementTree(tree, arr, 2*index+1, mid+1, end);
		tree[index]=Integer.min(tree[2*index],tree[2*index+1]);
	}
	
	public static int Query(int[] tree,int[] lazytree,int index,int start,int end,int left,int right) {
		//No Overlap
		if(left>end || right<start) {
			return Integer.MAX_VALUE;
		}
		if(lazytree[index]!=0) {
			tree[index]+=lazytree[index];
			//checking for not being leaf node
			if(start!=end) {
				lazytree[index*2]+=lazytree[index];
				lazytree[index*2+1]+=lazytree[index];
			}
			lazytree[index]=0;
		}
		//Complete Overlap
		if(start>=left && end<=right) {
			return tree[index];
		}
		//Partial Overlap
		int mid=(start+end) >> 1;
		int q1=Query(tree,lazytree,index*2,start,mid,left,right);//querying left child
		int q2=Query(tree,lazytree,index*2+1,mid+1,end,left,right);//querying right child
		return Integer.min(q2, q1);
	}
	
	// Algo: 1> First check the current node does not have any laziness if it has any than propagate it to its 
	// children and update current node...
	// 2> Now check for complete overlap ... again update current node and add value to children nodes
	// 3> Now for partial overlap recur to left and right
	
	public static void UpdateRangeViaLazyPropagation(int[] tree,int[] lazytree,int index,int start,int end,int i,int j,int val) {
		if(lazytree[index]!=0) {
			tree[index]+=lazytree[index];
			//checking for not being leaf node
			if(start!=end) {
				lazytree[index*2]+=lazytree[index];
				lazytree[index*2+1]+=lazytree[index];
			}
			lazytree[index]=0;
		}
		//Base Condition and no overlap
		if(start>end || start>j || end<i) {
			return;
		}
		//Complete Overlap
		if(start>=i && end<=j) {
			tree[index]+=val;
			//checking for not being leaf node
			if(start!=end) {
				lazytree[index*2]+=val;
				lazytree[index*2+1]+=val;
			}
			return;
		}
		//Partial Overlap
		int mid=(start+end)>>1;
		UpdateRangeViaLazyPropagation(tree,lazytree,index*2,start,mid,i,j,val);
		UpdateRangeViaLazyPropagation(tree,lazytree,index*2+1,mid+1,end,i,j,val);
		tree[index]=Integer.min(tree[index*2],tree[index*2+1]);
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr= {4,2,4,-2,3};
		int n=arr.length;
		int[] tree=new int[4*n+1];
		int[] lazytree=new int[4*n+1];
		Build_SegementTree(tree, arr, 1, 0,n-1);
		for(int i=0;i<tree.length;i++) {
			System.out.print(tree[i]+" ");
		}
		System.out.println();
		System.out.println(Query(tree,lazytree, 1, 0, arr.length-1, 0, 3));
		UpdateRangeViaLazyPropagation(tree,lazytree, 1, 0,arr.length-1, 3 , 3  , 10);
		System.out.println(Query(tree,lazytree, 1, 0, arr.length-1, 0, 3));
		UpdateRangeViaLazyPropagation(tree,lazytree, 1, 0, arr.length-1, 2, 3, -12);
		System.out.println(Query(tree,lazytree, 1, 0, arr.length-1, 0, 4));
	}

}
