package SegmentTress;

public class RMQ {

	// A segment tree is complete binary tree
	// It has n-1 internal nodes and n leaf nodes hence total of 2n-1 nodes
	// We are using array for storing segment tree//*Important*
	// Numbering segment tree from top to bottom starting with 1 
	// Children of the i th node are [i*2] and [i*2+1]
	// Parent of the i th node is [i/2]
	// Max array size required to build a tree with N leaf nodes is 2*2^ceil(log2(n))-1 or approximate 4*n+1
	// Refer book cb at page 136 for understanding above statement
	
	public static void Build_SegementTree(int[] tree,int [] arr,int index,int start,int end) {
		//Base Case
		if(start>end) {
			return;
		}
		//Leaf node
		if(start==end) {
			tree[index]=arr[start];
			return;
		}
		//Internal Node
		int mid=(start+end) >> 1;
		Build_SegementTree(tree, arr, 2*index, start, mid);
		Build_SegementTree(tree, arr, 2*index+1, mid+1, end);
		tree[index]=Integer.min(tree[2*index],tree[2*index+1]);
	}
	
	
	// Cases for query are : 
	// 1. Complete overlap(return current minimum value)
	// 2. Partial overlap(again send for further recursion till reach the condition of complete or no overlap)
	// 3. No overlap(return infinity)
	public static int Query(int[] tree,int index,int start,int end,int left,int right) {
		//No Overlap
		if(left>end || right<start) {
			return Integer.MAX_VALUE;
		}
		//Complete Overlap
		if(start>=left && end<=right) {
			return tree[index];
		}
		//Partial Overlap
		int mid=(start+end) >> 1;
		int q1=Query(tree,index*2,start,mid,left,right);//querying left child
		int q2=Query(tree,index*2+1,mid+1,end,left,right);//querying right child
		return Integer.min(q2, q1);
	}
	
	
	// Two types of updates are:
	// 1. Range Update -- will be covered during lazy propagation
	// 2. Node Update -- will be covered here
	public static void Update(int[] tree,int index,int start,int end,int i,int val) {//Node Update
		//Out of range case
		if(start>i || end<i) {
			return;
		}
		//leaf node hence the node needed to be updated
		if(start==end) {
			tree[index]=val;
			return;
		}
		//lies in this range hence sending update command to children
		int mid=( start+end ) >> 1;
		Update(tree,index*2,start,mid,i,val);//updating left child
		Update(tree,index*2+1,mid+1,end,i,val);//updating right child
		//Updating the current node
		tree[index]=Integer.min(tree[index*2],tree[index*2+1]);
	}
	
	public static void UpdateRange(int[] tree,int index,int start,int end,int i,int j,int val) {//Range Update
		//We have to traverse whole tree approximately once hence time complexity will be O(n)
		//Out of range
		if(start>end || start>j || end<i) {
			return;
		}
		//leaf node hence need to be updated
		if(start==end) {
			tree[index]+=val;
			return;
		}
		//Partial or complete overlap hence sending to its children
		int mid=(start+end)>>1;
		UpdateRange(tree, 2*index, start, mid, i, j, val);//Updating left child
		UpdateRange(tree, 2*index+1, mid+1, end, i, j , val);//Updating right child
		//Updating current node
		tree[index]=Integer.min(tree[index*2],tree[index*2+1]);
	}
	
	// Time Complexity:   1> Building   O(n)
	// 	  				  2> Query      O(log(n))
	//					  3> Update     Range Update     O(n) but with help of Lazy propagation we can make it O(log(n))
	//					  4> 		   Node Update      O(log(n))
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr= {4,2,4,-2,3};
		int[] tree=new int[4*arr.length+1];
		Build_SegementTree(tree, arr, 1, 0, arr.length-1);
		for(int i=0;i<tree.length;i++) {
			System.out.print(tree[i]+" ");
		}
		System.out.println();
		System.out.println(Query(tree, 1, 0, arr.length-1, 0, 3));
		Update(tree, 1, 0,arr.length-1, 3 , 10);
		System.out.println(Query(tree, 1, 0, arr.length-1, 0, 3));
		UpdateRange(tree, 1, 0, arr.length-1, 2, 3, -12);
		System.out.println(Query(tree, 1, 0, arr.length-1, 0, 4));
	}

}
