public class SumOfSegmentsUsingLazyPropagation {

	public static void Build(int[] tree,int[] arr,int index,int start,int end) {
		if(start>end) {
			return;
		}
		if(start == end) {
			tree[index]=arr[start];
			return;
		}
		int mid=(start+end)>>1;
		Build(tree,arr,index*2,start,mid);
		Build(tree,arr,index*2+1,mid+1,end);
		tree[index]=tree[index*2]+tree[index*2+1];
	}

	public static int Query(int[] tree,int[] lazytree,int index,int start,int end,int left,int right) {
		//No Overlap
		if(start>right || end<left || right<left) {
			return 0;
		}
		if(lazytree[index]!=0) {
			tree[index]+=(end-start+1)*lazytree[index];
			if(start!=end) {
				lazytree[index*2]+=lazytree[index];
				lazytree[index*2+1]+=lazytree[index];
			}
			lazytree[index]=0;
		}
		//Complete Overlap
		if(start>=left && right>=end) {
			return tree[index];
		}
		//Partial Overlap
		int mid=(start+end)>>1;
		int first=Query(tree,lazytree,index*2,start,mid,left,right);
		int second=Query(tree,lazytree,index*2+1,mid+1,end,left,right);
		return first+second;
	}
	
	public static void Update(int[] tree,int[] lazytree,int index,int start,int end,int left,int right,int val) {
		if(lazytree[index]!=0) {
			tree[index]+=(end-start+1)*lazytree[index];
			if(start!=end) {
				lazytree[index*2]+=lazytree[index];
				lazytree[index*2+1]+=lazytree[index];
			}
			lazytree[index]=0;
		}
		//Out of range
		if(start>end || start>right ||end<left ) {
			return;
		}
		//Complete Overlap
		if(start>=left && right>=end) {
			tree[index]+=(start-end+1)*val;
			if(start!=end) {
				lazytree[index*2]+=val;
				lazytree[index*2+1]+=val;
			}
			return;
		}
		//Partial Overlap
		int mid=(start+end)>>1;
		Update(tree,lazytree,index*2,start,mid,left,right,val);
		Update(tree,lazytree,index*2+1,mid+1,end,left,right,val);
		tree[index]=tree[index*2]+tree[index*2+1];
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr= {1,2,3,4,5};
		int[] tree=new int[4*arr.length+1];
		int[] lazytree=new int[4*arr.length+1];
		Build(tree,arr,1,0,arr.length-1);
		for(int i=0;i<tree.length;i++) {
			System.out.print(tree[i]+" ");
		}
		System.out.println();
		System.out.println(Query(tree,lazytree,1,0,arr.length-1,0,3));
		Update(tree,lazytree,1,0,arr.length-1,0,4,2);
		System.out.println(Query(tree,lazytree,1,0,arr.length-1,0,3));
	}

}
