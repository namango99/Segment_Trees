//Link : http://codeforces.com/contest/339/problem/D
//One of the easy problem on segment trees
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.StringTokenizer;

public class Round197div2B {

	public static void Build(long[] tree,int[] arr,int index,int start,int end ,boolean operation) {
		if(start==end) {
			tree[index]=arr[start];
			return;
		}
		int mid=(start+end)>>1;
		Build(tree,arr,index*2,start,mid,!operation);
		Build(tree,arr,index*2+1,mid+1,end,!operation);
		if(operation) {
			tree[index]=tree[index*2]|tree[index*2+1];
		}else {
			tree[index]=tree[index*2]^tree[index*2+1];
		}
	}
	
	public static void Update(long[] tree,int index,int start,int end,int pos,int val,boolean operation) {
		if(pos<start || pos>end) {
			return;
		}
		if(start==end) {//required node
			tree[index]=val;
			return;
		}
		int mid=(start+end)>>1;
		Update(tree,index*2,start,mid,pos,val,!operation);
		Update(tree,index*2+1,mid+1,end,pos,val,!operation);
		if(operation) {
			tree[index]=tree[index*2]|tree[index*2+1];
		}else {
			tree[index]=tree[index*2]^tree[index*2+1];
		}
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		out=new PrintWriter(new BufferedOutputStream(System.out));
		FastReader s=new FastReader();
		int n=s.nextInt();
		int m=s.nextInt();
		int[] arr=new int[1<<n];
		for(int i=0;i<1<<n;i++) {
			arr[i]=s.nextInt();
		}
		long[] tree=new long[4*(1<<n)+1];
		Build(tree,arr,1,0,arr.length-1,(n&1)==1?true:false);
		while(m-->0) {
			int pos=s.nextInt()-1;
			int val=s.nextInt();
			Update(tree,1,0,arr.length-1,pos,val,(n&1)==1?true:false);
			out.println(tree[1]);
		}
		out.close();
	}	

	public static PrintWriter out;
	
	public static class FastReader {
		BufferedReader br;
		StringTokenizer st;
		//it reads the data about the specified point and divide the data about it ,it is quite fast
		//than using direct 

		public FastReader() {
			br = new BufferedReader(new InputStreamReader(System.in));
			//InputStream reads the data and decodes in character stream
			//It acts as bridge between byte stream and character stream
		}

		String next() {
			while (st == null || !st.hasMoreTokens()) {
				try {
					st = new StringTokenizer(br.readLine());
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			return st.nextToken();
		}

		int nextInt() {
			return Integer.parseInt(next());//converts string to integer
		}

		double nextDouble() {
			return Double.parseDouble(next());
		}

		long nextLong() {
			return Long.parseLong(next());
		}

		String nextLine() {
			String str = "";
			try {
				str = br.readLine();
			} catch (Exception e) {
				e.printStackTrace();
			}
			return str;
		}
	}
	
}
